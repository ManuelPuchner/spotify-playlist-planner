datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  managedPlaylists ManagedPlaylist[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model ManagedPlaylist {
  userId            String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  spotifyPlaylistId String           @id
  plannedReleases   PlannedRelease[] // The planned releases for this playlist

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, spotifyPlaylistId])
}

model PlannedRelease {
  id                String               @id @default(cuid())
  managedPlaylistId String
  managedPlaylist   ManagedPlaylist      @relation(fields: [managedPlaylistId], references: [spotifyPlaylistId], onDelete: Cascade)
  scheduledAt       DateTime? // When the release should occur
  recurrenceRule    String? // Optional: e.g., "every friday", "alle 5 tage", etc.
  plannedSongs      PlannedReleaseSong[]
  isActivated       Boolean              @default(false) // Whether the release is active

  name String? // Optional name for the release

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlannedReleaseSong {
  plannedReleaseId String
  plannedRelease   PlannedRelease @relation(fields: [plannedReleaseId], references: [id], onDelete: Cascade)
  spotifyTrackId   String
  order            Int? // Optional ordering index

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([plannedReleaseId, spotifyTrackId])
}
